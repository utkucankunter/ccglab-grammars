
* (ccg-deduce '(ben gel -me -iyor -agr))

T
* (cky-show-deduction)


Derivation 1
--------------
LEX   (BEN) := NP
        : SPEAKER
LEX   (GEL) := VP\NP
        : (LAM X (COME X))
LEX   (-ME) := ((VP\NP)\\(VP\NP))/*((VP\NP)\\(VP\NP))
        : (LAM N (LAM P (LAM X (LAM W0 (LAM T0 (NOT ((((N P) X) W0) T0)))))))
LEX   (-IYOR) := (VP\NP)\\(VP\NP)
        : (LAM P
           (LAM X
            (LAM W0
             (LAM T0
              ((((EXISTS T1) EXISTS) T2)
               (((AND ((EARLIER T0) T1)) ((EARLIER T2) T0))
                (((P X) W0) (T1 T2))))))))
>     (-ME)(-IYOR) := (VP\NP)\\(VP\NP)
        : ((LAM N (LAM P (LAM X (LAM W0 (LAM T0 (NOT ((((N P) X) W0) T0)))))))
           (LAM P
            (LAM X
             (LAM W0
              (LAM T0
               ((((EXISTS T1) EXISTS) T2)
                (((AND ((EARLIER T0) T1)) ((EARLIER T2) T0))
                 (((P X) W0) (T1 T2)))))))))
<     (GEL)(-ME -IYOR) := VP\NP
        : (((LAM N (LAM P (LAM X (LAM W0 (LAM T0 (NOT ((((N P) X) W0) T0)))))))
            (LAM P
             (LAM X
              (LAM W0
               (LAM T0
                ((((EXISTS T1) EXISTS) T2)
                 (((AND ((EARLIER T0) T1)) ((EARLIER T2) T0))
                  (((P X) W0) (T1 T2)))))))))
           (LAM X (COME X)))
LEX   (-AGR) := (S\NP)\\(VP\NP)
        : (LAM P (LAM X (P X)))
<     (GEL -ME -IYOR)(-AGR) := S\NP
        : ((LAM P (LAM X (P X)))
           (((LAM N
              (LAM P (LAM X (LAM W0 (LAM T0 (NOT ((((N P) X) W0) T0)))))))
             (LAM P
              (LAM X
               (LAM W0
                (LAM T0
                 ((((EXISTS T1) EXISTS) T2)
                  (((AND ((EARLIER T0) T1)) ((EARLIER T2) T0))
                   (((P X) W0) (T1 T2)))))))))
            (LAM X (COME X))))
<     (BEN)(GEL -ME -IYOR -AGR) := S
        : (((LAM P (LAM X (P X)))
            (((LAM N
               (LAM P (LAM X (LAM W0 (LAM T0 (NOT ((((N P) X) W0) T0)))))))
              (LAM P
               (LAM X
                (LAM W0
                 (LAM T0
                  ((((EXISTS T1) EXISTS) T2)
                   (((AND ((EARLIER T0) T1)) ((EARLIER T2) T0))
                    (((P X) W0) (T1 T2)))))))))
             (LAM X (COME X))))
           SPEAKER)

Final LF, normal-order evaluated: 

    (LAM W0
     (LAM T0
      (NOT
       ((((EXISTS T1) EXISTS) T2)
        (((AND ((EARLIER T0) T1)) ((EARLIER T2) T0))
         (((COME SPEAKER) W0) (T1 T2))))))) =
    (\ W0 . \ T0 . NOT
     (EXISTS T1 EXISTS T2
      (AND (EARLIER T0 T1) (EARLIER T2 T0) (COME SPEAKER W0 (T1 T2)))))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
NIL
* (dribble)
