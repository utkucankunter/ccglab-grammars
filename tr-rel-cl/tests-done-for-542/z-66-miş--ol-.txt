
* (ccg-deduce '(sen gel -miş ol))

T
* (cky-show-deduction)


Derivation 1
--------------
LEX   (SEN) := NP
        : HEARER
LEX   (GEL) := VP\NP
        : (LAM X (COME X))
LEX   (-MIŞ) := (VP\NP)\\(VP\NP)
        : (LAM P
           (LAM X
            (LAM W0
             (LAM T0
              ((EXISTS T)
               (((AND ((EARLIER T0) T)) (((P X) W0) T))
                (NOT ((((KNOW (((P X) W0) T)) SPEAKER) W0) T))))))))
<     (GEL)(-MIŞ) := VP\NP
        : ((LAM P
            (LAM X
             (LAM W0
              (LAM T0
               ((EXISTS T)
                (((AND ((EARLIER T0) T)) (((P X) W0) T))
                 (NOT ((((KNOW (((P X) W0) T)) SPEAKER) W0) T))))))))
           (LAM X (COME X)))
LEX   (OL) := (VP\NP)\*(VP\NP)
        : (LAM P (LAM X (AUX (((P X) W0) T0))))
<     (GEL -MIŞ)(OL) := VP\NP
        : ((LAM P (LAM X (AUX (((P X) W0) T0))))
           ((LAM P
             (LAM X
              (LAM W0
               (LAM T0
                ((EXISTS T)
                 (((AND ((EARLIER T0) T)) (((P X) W0) T))
                  (NOT ((((KNOW (((P X) W0) T)) SPEAKER) W0) T))))))))
            (LAM X (COME X))))
<     (SEN)(GEL -MIŞ OL) := VP
        : (((LAM P (LAM X (AUX (((P X) W0) T0))))
            ((LAM P
              (LAM X
               (LAM W0
                (LAM T0
                 ((EXISTS T)
                  (((AND ((EARLIER T0) T)) (((P X) W0) T))
                   (NOT ((((KNOW (((P X) W0) T)) SPEAKER) W0) T))))))))
             (LAM X (COME X))))
           HEARER)

Final LF, normal-order evaluated: 

    (AUX
     ((EXISTS T)
      (((AND ((EARLIER T0) T)) (((COME HEARER) W0) T))
       (NOT ((((KNOW (((COME HEARER) W0) T)) SPEAKER) W0) T))))) =
    (AUX
     (EXISTS T
      (AND (EARLIER T0 T) (COME HEARER W0 T)
       (NOT (KNOW (COME HEARER W0 T) SPEAKER W0 T)))))

Derivation 2
--------------
LEX   (SEN) := NP
        : HEARER
LEX   (GEL) := VP\NP
        : (LAM X (COME X))
LEX   (-MIŞ) := (VP\NP)\\(VP\NP)
        : (LAM P
           (LAM X
            (LAM W0
             (LAM T0
              ((EXISTS T)
               (((AND ((EARLIER T0) T)) (((P X) W0) T))
                (NOT ((((KNOW (((P X) W0) T)) SPEAKER) W0) T))))))))
<     (GEL)(-MIŞ) := VP\NP
        : ((LAM P
            (LAM X
             (LAM W0
              (LAM T0
               ((EXISTS T)
                (((AND ((EARLIER T0) T)) (((P X) W0) T))
                 (NOT ((((KNOW (((P X) W0) T)) SPEAKER) W0) T))))))))
           (LAM X (COME X)))
<     (SEN)(GEL -MIŞ) := VP
        : (((LAM P
             (LAM X
              (LAM W0
               (LAM T0
                ((EXISTS T)
                 (((AND ((EARLIER T0) T)) (((P X) W0) T))
                  (NOT ((((KNOW (((P X) W0) T)) SPEAKER) W0) T))))))))
            (LAM X (COME X)))
           HEARER)
LEX   (OL) := VP\*VP
        : (LAM P (AUX ((P W0) T0)))
<     (SEN GEL -MIŞ)(OL) := VP
        : ((LAM P (AUX ((P W0) T0)))
           (((LAM P
              (LAM X
               (LAM W0
                (LAM T0
                 ((EXISTS T)
                  (((AND ((EARLIER T0) T)) (((P X) W0) T))
                   (NOT ((((KNOW (((P X) W0) T)) SPEAKER) W0) T))))))))
             (LAM X (COME X)))
            HEARER))

Final LF, normal-order evaluated: 

    (AUX
     ((EXISTS T)
      (((AND ((EARLIER T0) T)) (((COME HEARER) W0) T))
       (NOT ((((KNOW (((COME HEARER) W0) T)) SPEAKER) W0) T))))) =
    (AUX
     (EXISTS T
      (AND (EARLIER T0 T) (COME HEARER W0 T)
       (NOT (KNOW (COME HEARER W0 T) SPEAKER W0 T)))))

Try (cky-pprint) to see the details including the features and slash modalities.
    (cky-reveal-cell <cell>) to pretty-print the parse in <cell>.
NIL
* (dribble)
